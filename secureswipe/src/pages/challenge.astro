---
// challenge.astro - Página del modo desafío
import MainLayout from '../layouts/MainLayout.astro';
import SecurityCard from '../components/ui/SecurityCard.astro';
import FeedbackPanel from '../components/ui/FeedbackPanel.astro';

// Título y descripción para SEO
const title = 'Modo Desafío | SecureSwipe';
const description = 'Pon a prueba tus conocimientos de seguridad en el modo desafío de SecureSwipe. ¡Compite por la mejor puntuación!';
---

<MainLayout title={title} description={description}>
  <div class="challenge-container">
    <header class="challenge-header">
      <h1>Modo Desafío</h1>
      <p>Demuestra tus conocimientos sobre seguridad en desarrollo de software</p>
      
      <div class="challenge-stats">
        <div class="stat-item">
          <span class="stat-label">Tarjetas</span>
          <span class="stat-value" id="card-count">0/10</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Puntuación</span>
          <span class="stat-value" id="current-score">0</span>
        </div>
        <div class="stat-item">
          <span class="stat-label">Tiempo</span>
          <span class="stat-value" id="timer">00:00</span>
        </div>
      </div>
      
      <div class="challenge-config">
        <div class="difficulty-selector">
          <span>Dificultad:</span>
          <div class="button-group">
            <button data-difficulty="1" class="active">Fácil</button>
            <button data-difficulty="2">Media</button>
            <button data-difficulty="3">Difícil</button>
          </div>
        </div>
        <div class="category-selector">
          <label for="category-select">Categoría:</label>
          <select id="category-select">
            <option value="">Todas</option>
            <!-- Las categorías se cargarán dinámicamente -->
          </select>
        </div>
        <button id="start-challenge" class="primary-button">Iniciar Desafío</button>
      </div>
    </header>
    
    <div class="challenge-content">
      <!-- Estado inicial - configuración -->
      <div id="challenge-setup" class="active">
        <div class="challenge-instructions">
          <h2>Instrucciones</h2>
          <ul>
            <li><strong>Objetivo:</strong> Identifica correctamente si cada tarjeta representa una vulnerabilidad o una buena práctica.</li>
            <li><strong>Desliza a la derecha</strong> si crees que es una <strong>buena práctica</strong>.</li>
            <li><strong>Desliza a la izquierda</strong> si crees que es una <strong>vulnerabilidad</strong>.</li>
            <li><strong>Puntuación:</strong> Ganarás más puntos por respuestas rápidas y correctas.</li>
            <li><strong>Tiempo:</strong> Tienes 3 minutos para completar el desafío.</li>
          </ul>
        </div>
      </div>
      
      <!-- Estado de juego activo -->
      <div id="challenge-game" class="hidden">
        <div class="swipe-container">
          <!-- Las tarjetas se cargarán dinámicamente -->
          <div class="swipe-indicators">
            <div class="swipe-left-indicator">
              <i class="icon-vulnerability"></i>
              <span>Vulnerabilidad</span>
            </div>
            <div class="swipe-right-indicator">
              <i class="icon-good-practice"></i>
              <span>Buena Práctica</span>
            </div>
          </div>
        </div>
        
        <div class="feedback-container hidden">
          <!-- Aquí se mostrará el feedback -->
        </div>
      </div>
      
      <!-- Estado de resultados finales -->
      <div id="challenge-results" class="hidden">
        <div class="results-summary">
          <h2>¡Desafío Completado!</h2>
          <div class="score-display">
            <span id="final-score">0</span>
            <span class="score-label">puntos</span>
          </div>
          
          <div class="stats-breakdown">
            <div class="stat-row">
              <span>Respuestas correctas:</span>
              <span id="correct-answers">0/0</span>
            </div>
            <div class="stat-row">
              <span>Tiempo total:</span>
              <span id="total-time">00:00</span>
            </div>
            <div class="stat-row">
              <span>Precisión:</span>
              <span id="accuracy">0%</span>
            </div>
          </div>
          
          <div class="action-buttons">
            <button id="retry-challenge" class="secondary-button">Reintentar</button>
            <button id="share-results" class="primary-button">Compartir Resultados</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</MainLayout>

<script>
  // Importación de servicios
  import { CardService } from '../services/cardService.js';
  import { StorageService } from '../services/storageService.js';
  import { EvaluationService } from '../services/evaluationService.js';
  import { SwipeCard } from '../components/interactive/SwipeCard.js';
  
  // Inicialización de servicios
  const cardService = new CardService();
  const storageService = new StorageService();
  const evaluationService = new EvaluationService();
  
  // Estado del juego
  let challengeState = {
    isActive: false,
    cards: [],
    currentCardIndex: 0,
    difficulty: 1,
    category: '',
    score: 0,
    startTime: null,
    timeLimit: 180, // 3 minutos en segundos
    timer: null,
    results: {
      totalCards: 0,
      correctAnswers: 0,
      incorrectAnswers: 0,
      timeSpent: 0
    }
  };
  
  // Referencias DOM
  const challengeSetupElement = document.getElementById('challenge-setup');
  const challengeGameElement = document.getElementById('challenge-game');
  const challengeResultsElement = document.getElementById('challenge-results');
  const swipeContainerElement = document.querySelector('.swipe-container');
  const feedbackContainerElement = document.querySelector('.feedback-container');
  const difficultyButtons = document.querySelectorAll('.difficulty-selector button');
  const categorySelect = document.getElementById('category-select');
  const startChallengeButton = document.getElementById('start-challenge');
  const retryButton = document.getElementById('retry-challenge');
  const shareButton = document.getElementById('share-results');
  const cardCountElement = document.getElementById('card-count');
  const currentScoreElement = document.getElementById('current-score');
  const timerElement = document.getElementById('timer');
  const finalScoreElement = document.getElementById('final-score');
  const correctAnswersElement = document.getElementById('correct-answers');
  const totalTimeElement = document.getElementById('total-time');
  const accuracyElement = document.getElementById('accuracy');
  
  // Inicialización
  async function init() {
    await cardService.loadCards();
    loadCategories();
    setupEventListeners();
  }
  
  // Carga las categorías en el selector
  async function loadCategories() {
    const categories = await cardService.getCategories();
    categories.forEach(category => {
      const option = document.createElement('option');
      option.value = category.id;
      option.textContent = category.name;
      categorySelect.appendChild(option);
    });
  }
  
  // Configura los event listeners
  function setupEventListeners() {
    // Botones de dificultad
    difficultyButtons.forEach(button => {
      button.addEventListener('click', () => {
        difficultyButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        challengeState.difficulty = parseInt(button.dataset.difficulty, 10);
      });
    });
    
    // Botón de inicio
    startChallengeButton.addEventListener('click', startChallenge);
    
    // Botón de reintentar
    retryButton.addEventListener('click', () => {
      // Ocultar resultados y mostrar configuración
      challengeResultsElement.classList.add('hidden');
      challengeSetupElement.classList.remove('hidden');
    });
    
    // Botón de compartir
    shareButton.addEventListener('click', shareResults);
  }
  
  // Inicia el desafío
  async function startChallenge() {
    // Reiniciar estado
    challengeState = {
      ...challengeState,
      isActive: true,
      cards: [],
      currentCardIndex: 0,
      score: 0,
      startTime: new Date(),
      results: {
        totalCards: 0,
        correctAnswers: 0,
        incorrectAnswers: 0,
        timeSpent: 0
      }
    };
    
    // Cargar tarjetas según dificultad y categoría
    const options = {
      count: 10,
      difficulty: challengeState.difficulty,
      category: challengeState.category
    };
    
    challengeState.cards = await cardService.getChallengeCards(options);
    challengeState.results.totalCards = challengeState.cards.length;
    
    // Actualizar UI
    updateCardCount();
    updateScore();
    
    // Mostrar pantalla de juego
    challengeSetupElement.classList.add('hidden');
    challengeGameElement.classList.remove('hidden');
    
    // Iniciar temporizador
    startTimer();
    
    // Cargar primera tarjeta
    loadCurrentCard();
  }
  
  // Carga la tarjeta actual en el DOM
  function loadCurrentCard() {
    // Limpiar contenedor
    swipeContainerElement.innerHTML = '';
    
    if (challengeState.currentCardIndex >= challengeState.cards.length) {
      endChallenge();
      return;
    }
    
    const card = challengeState.cards[challengeState.currentCardIndex];
    
    // Crear elemento de tarjeta
    const cardElement = document.createElement('div');
    cardElement.className = 'swipe-card';
    cardElement.dataset.id = card.id;
    cardElement.dataset.type = card.type;
    
    cardElement.innerHTML = `
      <div class="card-inner">
        <h3>${card.title}</h3>
        <p>${card.description}</p>
        <div class="code-example">
          <pre><code>${card.codeExample}</code></pre>
        </div>
        <div class="card-footer">
          <span class="card-category">${card.category}</span>
          <span class="card-difficulty">Dificultad: ${card.difficulty}</span>
        </div>
      </div>
    `;
    
    swipeContainerElement.appendChild(cardElement);
    
    // Inicializar funcionalidad de deslizamiento
    const swipeCard = new SwipeCard({
      container: swipeContainerElement,
      onSwipeLeft: () => handleSwipe(card, 'left'),
      onSwipeRight: () => handleSwipe(card, 'right')
    });
  }
  
  // Maneja el deslizamiento de una tarjeta
  function handleSwipe(card, direction) {
    const startResponseTime = new Date();
    const responseTime = startResponseTime - challengeState.startTime;
    
    // Evaluar respuesta
    const isCorrect = evaluationService.evaluateSwipe(card.type, direction);
    
    // Registrar en resultados
    if (isCorrect) {
      challengeState.results.correctAnswers++;
      // Calcular puntuación
      const points = evaluationService.calculateScore(card, isCorrect, responseTime);
      challengeState.score += points;
    } else {
      challengeState.results.incorrectAnswers++;
    }
    
    // Mostrar feedback
    const feedback = evaluationService.generateFeedback(card, isCorrect);
    showFeedback(feedback, isCorrect);
    
    // Actualizar almacenamiento
    storageService.addCardViewed(card.id);
    if (isCorrect) {
      storageService.addCorrectAnswer(card.id);
    } else {
      storageService.addIncorrectAnswer(card.id);
    }
    
    // Actualizar UI
    updateScore();
    
    // Preparar siguiente tarjeta después de un breve retraso
    setTimeout(() => {
      challengeState.currentCardIndex++;
      updateCardCount();
      hideFeedback();
      loadCurrentCard();
    }, 2000);
  }
  
  // Muestra el panel de feedback
  function showFeedback(feedback, isCorrect) {
    feedbackContainerElement.innerHTML = `
      <div class="feedback-panel ${isCorrect ? 'success' : 'error'}">
        <h3>${feedback.title}</h3>
        <p>${feedback.message}</p>
      </div>
    `;
    feedbackContainerElement.classList.remove('hidden');
    
    // Deshabilitar temporalmente el swipe mientras se muestra feedback
    swipeContainerElement.classList.add('disabled');
  }
  
  // Oculta el panel de feedback
  function hideFeedback() {
    feedbackContainerElement.classList.add('hidden');
    swipeContainerElement.classList.remove('disabled');
  }
  
  // Actualiza el contador de tarjetas
  function updateCardCount() {
    cardCountElement.textContent = `${challengeState.currentCardIndex}/${challengeState.results.totalCards}`;
  }
  
  // Actualiza la puntuación
  function updateScore() {
    currentScoreElement.textContent = challengeState.score;
  }
  
  // Inicia el temporizador
  function startTimer() {
    const startTime = new Date();
    challengeState.timer = setInterval(() => {
      const currentTime = new Date();
      const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);
      const remainingSeconds = challengeState.timeLimit - elapsedSeconds;
      
      if (remainingSeconds <= 0) {
        endChallenge();
        return;
      }
      
      const minutes = Math.floor(remainingSeconds / 60);
      const seconds = remainingSeconds % 60;
      timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }, 1000);
  }
  
  // Finaliza el desafío
  function endChallenge() {
    // Detener el temporizador
    clearInterval(challengeState.timer);
    
    // Calcular resultados finales
    const endTime = new Date();
    challengeState.results.timeSpent = Math.floor((endTime - challengeState.startTime) / 1000);
    
    // Actualizar elementos de resultados
    finalScoreElement.textContent = challengeState.score;
    correctAnswersElement.textContent = `${challengeState.results.correctAnswers}/${challengeState.results.totalCards}`;
    
    const minutes = Math.floor(challengeState.results.timeSpent / 60);
    const seconds = challengeState.results.timeSpent % 60;
    totalTimeElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    const accuracy = challengeState.results.totalCards > 0 
      ? Math.round((challengeState.results.correctAnswers / challengeState.results.totalCards) * 100) 
      : 0;
    accuracyElement.textContent = `${accuracy}%`;
    
    // Mostrar pantalla de resultados
    challengeGameElement.classList.add('hidden');
    challengeResultsElement.classList.remove('hidden');
    
    // Guardar resultados en el almacenamiento
    saveResults();
  }
  
  // Guarda los resultados del desafío
  function saveResults() {
    // Aquí se puede implementar la lógica para guardar los resultados
    // de desafíos completados, récords, etc.
    const currentUser = storageService.getUser();
    
    if (currentUser) {
      // Si se quiere guardar un historial de desafíos
      const progress = storageService.getProgress();
      
      if (!progress.challenges) {
        progress.challenges = [];
      }
      
      progress.challenges.push({
        date: new Date().toISOString(),
        difficulty: challengeState.difficulty,
        category: challengeState.category,
        score: challengeState.score,
        correctAnswers: challengeState.results.correctAnswers,
        totalCards: challengeState.results.totalCards,
        timeSpent: challengeState.results.timeSpent
      });
      
      storageService.setProgress(progress);
    }
  }
  
  // Comparte los resultados (placeholder)
  function shareResults() {
    // Implementación básica - puede expandirse para compartir en redes sociales
    if (navigator.share) {
      navigator.share({
        title: 'Mis resultados en SecureSwipe',
        text: `¡He conseguido ${challengeState.score} puntos en el modo desafío de SecureSwipe con una precisión del ${accuracyElement.textContent}!`,
        url: window.location.href
      }).catch(console.error);
    } else {
      alert(`¡Has conseguido ${challengeState.score} puntos en el modo desafío de SecureSwipe!`);
    }
  }
  
  // Iniciar
  init();
</script>

<style>
  .challenge-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 1rem;
  }
  
  .challenge-header {
    text-align: center;
    margin-bottom: 2rem;
  }
  
  .challenge-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
  }
  
  .challenge-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 1.5rem 0;
    background-color: var(--color-bg-alt);
    padding: 1rem;
    border-radius: 0.5rem;
  }
  
  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .stat-label {
    font-size: 0.875rem;
    color: var(--color-text-muted);
  }
  
  .stat-value {
    font-size: 1.5rem;
    font-weight: bold;
  }
  
  .challenge-config {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-width: 600px;
    margin: 0 auto;
    padding: 1.5rem;
    background-color: var(--color-bg-alt);
    border-radius: 0.5rem;
  }
  
  .difficulty-selector,
  .category-selector {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .button-group {
    display: flex;
    gap: 0.5rem;
  }
  
  .button-group button {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    background-color: var(--color-bg);
    border-radius: 0.25rem;
    cursor: pointer;
  }
  
  .button-group button.active {
    background-color: var(--color-primary);
    color: white;
    border-color: var(--color-primary);
  }
  
  .category-selector select {
    padding: 0.5rem;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    background-color: var(--color-bg);
    width: 100%;
  }
  
  .primary-button {
    padding: 0.75rem 1.5rem;
    background-color: var(--color-primary);
    color: white;
    border: none;
    border-radius: 0.25rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .primary-button:hover {
    background-color: var(--color-primary-dark);
  }
  
  .secondary-button {
    padding: 0.75rem 1.5rem;
    background-color: var(--color-bg-alt);
    color: var(--color-text);
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  
  .secondary-button:hover {
    background-color: var(--color-bg);
  }
  
  .challenge-content {
    margin-top: 2rem;
  }
  
  .challenge-instructions {
    background-color: var(--color-bg-alt);
    padding: 1.5rem;
    border-radius: 0.5rem;
    margin-bottom: 1.5rem;
  }
  
  .challenge-instructions ul {
    padding-left: 1.5rem;
    line-height: 1.6;
  }
  
  .swipe-container {
    position: relative;
    width: 100%;
    height: 500px;
    max-width: 600px;
    margin: 0 auto;
    perspective: 1000px;
    overflow: visible;
  }
  
  .swipe-card {
    position: absolute;
    width: 100%;
    height: 100%;
    background-color: var(--color-bg);
    border-radius: 1rem;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    cursor: grab;
    transition: transform 0.2s;
    padding: 1.5rem;
    overflow: hidden;
    display: flex;
    flex-direction: column;
  }
  
  .card-inner {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .card-inner h3 {
    margin-top: 0;
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }
  
  .code-example {
    margin: 1rem 0;
    background-color: #1e1e1e;
    border-radius: 0.5rem;
    padding: 1rem;
    overflow-x: auto;
  }
  
  .code-example pre {
    margin: 0;
    color: #d4d4d4;
    font-family: 'Consolas', 'Monaco', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
  }
  
  .card-footer {
    display: flex;
    justify-content: space-between;
    margin-top: auto;
    padding-top: 1rem;
    font-size: 0.875rem;
    color: var(--color-text-muted);
  }
  
  .swipe-indicators {
    position: absolute;
    bottom: -60px;
    left: 0;
    right: 0;
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
  }
  
  .swipe-left-indicator,
  .swipe-right-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }
  
  .swipe-left-indicator {
    color: var(--color-danger);
  }
  
  .swipe-right-indicator {
    color: var(--color-success);
  }
  
  .feedback-container {
    margin-top: 5rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .feedback-panel {
    padding: 1.5rem;
    border-radius: 0.5rem;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .feedback-panel.success {
    background-color: rgba(46, 204, 113, 0.1);
    border-left: 4px solid var(--color-success);
  }
  
  .feedback-panel.error {
    background-color: rgba(231, 76, 60, 0.1);
    border-left: 4px solid var(--color-danger);
  }
  
  .results-summary {
    text-align: center;
    max-width: 600px;
    margin: 0 auto;
    padding: 2rem;
    background-color: var(--color-bg-alt);
    border-radius: 1rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }
  
  .score-display {
    margin: 2rem 0;
  }
  
  #final-score {
    font-size: 4rem;
    font-weight: bold;
    color: var(--color-primary);
  }
  
  .score-label {
    font-size: 1.5rem;
    display: block;
    color: var(--color-text-muted);
  }
  
  .stats-breakdown {
    margin: 2rem 0;
    text-align: left;
  }
  
  .stat-row {
    display: flex;
    justify-content: space-between;
    padding: 0.75rem 0;
    border-bottom: 1px solid var(--color-border);
  }
  
  .action-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 2rem;
  }
  
  .hidden {
    display: none;
  }
  
  .disabled {
    pointer-events: none;
    opacity: 0.7;
  }
  
  /* Animaciones */
  @keyframes slideInUp {
    from {
      transform: translateY(50px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  .challenge-setup.active,
  .challenge-game.active,
  .challenge-results.active {
    animation: slideInUp 0.3s ease-out;
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .challenge-stats {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .stat-item {
      flex-direction: row;
      justify-content: space-between;
      width: 100%;
    }
    
    .swipe-container {
      height: 400px;
    }
  }
</style>
